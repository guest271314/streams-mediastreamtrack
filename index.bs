<pre class="metadata">
Title: Streams and MediaStreamTracks
Repository: wicg/streams-mediastreamtrack
Status: ED
ED: https://wicg.github.io/streams-mediastreamtrack
Shortname: streams-mediastreamtrack
Level: 1
Editor: Miguel Casas-Sanchez, w3cid 82825, Google Inc., mcasas@google.com
Editor: Adam Rice, Google Inc., ricea@google.com
Abstract: This document describes an API providing {{ReadableStream|ReadableStreams}} (and associated data types) out of {{MediaStreamTrack|MediaStreamTracks}}.

Group: wicg
</pre>

<style>
table {
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
  font-weight: bold;
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}
</style>

# Introduction # {#introduction}

{{Stream|Streams}} ([[!streams]]) are designed to provide real time streams of
data with powerful semantics (e.g. built-in backpressure and queuing) to allow
users to build higher-level abstractions. {{MediaStreamTrack|MediaStreamTracks}}
([[!getusermedia]]) are opaque handles to Real-Time video/audio being
transported in the browser. This document describes the ways in which
{{ReadableStream|ReadableStreams}} can be created out of a {{MediaStreamTrack}}.

Please see the <a href="https://github.com/yellowdoge/streams-mediastreamtrack/blob/gh-pages/README.md">Readme/Explainer</a> in the repository for use cases and more rationale.

# {{MediaStreamTrack}} API extension # {#api}

<pre class="idl">
partial interface MediaStreamTrack {
  // |any| should be ReadableStream, but that is not an idl type.
  [CallWith=ScriptState] readonly attribute any readable;
};
</pre>

<dl class="domintro">
  <dt><dfn attribute for="MediaStreamTrack"><code>readable</code></dfn></dt>
  <dd>Constructs a {{ReadableStream}} out of the {{MediaStreamTrack}} following
  the {{MediaStreamTrack}} lifetime. A {{ReadableStreamReader}} created out of
  this will produce {{VideoFrame|VideoFrames}}. </dd>

</dl>

# VideoFrame # {#videoframe}

<pre class="idl">
typedef (Uint8Array or FrozenArray&lt;Uint8Array>) VideoFrameDataArray;

interface VideoFrame {
  readonly attribute VideoFrameDataArray data;
  readonly attribute unsigned long width;
  readonly attribute unsigned long height;
  readonly attribute PixelFormat format;

  readonly attribute DOMHighResTimeStamp timecode;
};
</pre>

<div class="issue">
  When {{format}} == {{rgba}}, {{VideoFrame}} is just an [[2dcontext#imagedata]]
  with a {{timecode}}.  How to represent that in WebIDL?
</div>

<dl class="domintro">
  <dt><dfn attribute for="VideoFrame"><code>data</code></dfn></dt>
  <dd>

    <div class="issue">
    Consider using [[WebIDL#ArrayBufferView]] ("used to represent objects that
    provide a view on to an [[WebIDL#ArrayBuffer]].") -- it might expose too
    many format combinations though.
    </div>

  </dd>

  <dt><dfn attribute for="VideoFrame"><code>width</code></dfn></dt>
  <dd>Actual horizontal dimension of the data in the {{data}} object, in
  pixels.</dd>
  <dt><dfn attribute for="VideoFrame"><code>height</code></dfn></dt>
  <dd>Actual vertical dimension of the data in the {{data}} object, in
  pixels.</dd>

  <dt><dfn attribute for="VideoFrame"><code>format</code></dfn></dt>
  <dd>This attribute specifies the concrete pixel format of {{data}}; {{rgba}}
  is equivalent to the one of [[2dcontext#imagedata]].</dd>

  <dt><dfn attribute for="VideoFrame"><code>timecode</code></dfn></dt>
  <dd>The difference between the timestamp of the first generated chunk of data
  in {{VideoFrame}} and the timestamp of the first chunk in the first
  {{VideoFrame}} produced by this reader.  Note that the {{VideoFrame/timecode}}
  in the first produced {{VideoFrame}} does not need to be zero. </dd>

</dl>

## {{PixelFormat}} ## {#pixelformat-section}

<pre class="idl">
  enum PixelFormat {
    "rgba",
    "yuv420",
  };
</pre>

<dl class="domintro">
  <dt><dfn enum-value for="PixelFormat"><code>rgba</code></dfn></dt>
  <dd>
    Specifies one-dimensional data array in RGBA order, as integers in the range
    0 to 255. This is the same format as the one in [[2dcontext#imagedata]].
  </dd>
  <dt><dfn enum-value for="PixelFormat"><code>yuv420</code></dfn></dt>
  <dd></dd>
</dl>

# Examples # {#examples}

## VideoFrame reading and casting onto a &lt;canvas>

<div class="example" highlight="javascript">
<pre>
// Assuming |theCanvas| and |theStream| exist already.

let context = theCanvas.getContext("2d");

let track = theStream.getVideoTracks()[0];

track.readable.pipeTo(new WritableStream({
  write(videoFrame) {
    console.assert(videoFrame.format == "rgba");
    if (videoFrame.format != "rgba")
      return;

    theCanvas.width  = videoFrame.width;
    theCanvas.height = videoFrame.height;
    context.putImageData(videoFrame, 0, 0);
  }
  , close() {
    console.log("All data successfully read!");
  }
  , abort(e) {
    console.error("Uh, oh, something went wrong: ", e);
  }
}));
</pre>
</div>


<pre class="anchors">
spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: interface
        text: Array; url: sec-array-objects
        text: Promise; url:sec-promise-objects
        text: TypeError; url: sec-native-error-types-used-in-this-standard-typeerror
</pre>

<pre class="anchors">
type: interface; text: DOMHighResTimeStamp; url: https://www.w3.org/TR/hr-time-2/#dom-domhighrestimestamp;
</pre>

<pre class="link-defaults">
spec: html
    type: dfn
        text: allowed to show a popup
        text: in parallel
        text: incumbent settings object
</pre>

<pre class="anchors">
urlPrefix: https://streams.spec.whatwg.org/; type: interface; text: Stream;

urlPrefix: https://streams.spec.whatwg.org/#;
    type: interface;
        text: ReadableStream; url: readable-stream
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/mediacapture-streams/#;
    type: interface;
        text: MediaStream; url: mediastream
        text: MediaStreamTrack; url: mediastreamtrack
</pre>

